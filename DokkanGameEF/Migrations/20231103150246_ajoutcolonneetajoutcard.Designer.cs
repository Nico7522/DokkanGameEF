// <auto-generated />
using System;
using DokkanGameEF.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DokkanGameEF.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231103150246_ajoutcolonneetajoutcard")]
    partial class ajoutcolonneetajoutcard
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DokkanGameEF.Entities.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"), 1L, 1);

                    b.Property<int>("Attack")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Card_attack_details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Card_details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Card_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Defense")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Leader_skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Life")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("CardId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            Attack = 7888,
                            Card_attack_details = "Raises ATK & DEF for 1 turn and causes colossal damage to enemy",
                            Card_details = "ATK & DEF +59%; plus an additional ATK & DEF +59% when performing a Super Attack; all allies' Ki +2 and ATK & DEF +30%; plus an additional Ki +3 and ATK +59% when attacking Extreme Class enemies",
                            Card_name = "Son Goku",
                            Defense = 7888,
                            Leader_skill = "All Types Ki +3 and HP, ATK & DEF +59%",
                            Life = 7888,
                            Side = "Super",
                            Type = "END"
                        },
                        new
                        {
                            CardId = 2,
                            Attack = 8887,
                            Card_attack_details = "Greatly raises ATK, raises DEF and causes supreme damage to enemy",
                            Card_details = "Ki +1 at start of each turn and ATK +70% when there is a \"Goku's Family\" Category enemy; ATK & DEF +100% when performing a Super Attack; Ki +7 and DEF +70% when HP is 70% or less; chance of performing a critical hit +7% per PHY icon Ki Sphere obtained (up to 30%)",
                            Card_name = "Vegeta",
                            Defense = 8887,
                            Leader_skill = "'Vegeta's Family' Category Ki +3 and HP, ATK & DEF +130%; or PHY icon Type Ki + 3 and HP, ATK & DEF + 100 %",
                            Life = 8887,
                            Side = "Extreme",
                            Type = "END"
                        },
                        new
                        {
                            CardId = 3,
                            Attack = 8887,
                            Card_attack_details = "Greatly raises ATK & DEF for 1 turn and causes colossal damage to enemy",
                            Card_details = "ATK & DEF +50%; Ki +3 plus an additional DEF +50% as the 1st or 3rd attacker in a turn; plus an additional ATK +50% when performing an Ultra Super Attack; plus an additional Ki +3 when attacking Super Class enemies",
                            Card_name = "Frieza (1st Form)",
                            Defense = 8887,
                            Leader_skill = "Extreme Class Ki +4 and HP, ATK & DEF +90%;\r\nor\r\nSuper Class Ki +3 and HP, ATK & DEF +70%",
                            Life = 8887,
                            Side = "Extreme",
                            Type = "STR"
                        });
                });

            modelBuilder.Entity("DokkanGameEF.Entities.CardPlayer", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("CardId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("CardsPlayers");
                });

            modelBuilder.Entity("DokkanGameEF.Entities.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"), 1L, 1);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PlayerPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PlayerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Pseudo")
                        .IsUnique();

                    b.ToTable("Players");

                    b.HasCheckConstraint("CK_Mail_Regex", "Email LIKE '_%@_%._%'");
                });

            modelBuilder.Entity("DokkanGameEF.Entities.CardPlayer", b =>
                {
                    b.HasOne("DokkanGameEF.Entities.Card", "Card")
                        .WithMany("Players")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DokkanGameEF.Entities.Player", "Player")
                        .WithMany("Cards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DokkanGameEF.Entities.Card", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("DokkanGameEF.Entities.Player", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
